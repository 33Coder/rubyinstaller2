module RubyInstaller
  # :nodoc:
  module Ridk
    class << self
      include RubyInstaller::Colors

      def run!(args)
        enable_colors
        case args[0]
          when 'install'
            install(args[1..-1])
          when 'enable', 'exec'
            puts RubyInstaller.msys2_installation.enable_msys_apps_per_cmd
          when 'disable'
            puts RubyInstaller.msys2_installation.disable_msys_apps_per_cmd
          when 'enableps1', 'execps1'
            puts RubyInstaller.msys2_installation.enable_msys_apps_per_ps1
          when 'disableps1'
            puts RubyInstaller.msys2_installation.disable_msys_apps_per_ps1
          when 'version'
            print_version
          when 'help', '--help', '-?', '/?', nil
            print_help
          else
            $stderr.puts "Invalid option #{args[0].inspect}"
        end
      end

      # The ASCII art is thankfully generated by:
      # http://patorjk.com/software/taag/#p=display&f=Big&t=RubyInstaller2
      # http://patorjk.com/software/taag/#p=display&f=Bigfig&t=for%20Windows
LOGO = %q{
 _____       _          r _____           _        _ _        ry ___  y
|  __ \     | |         r|_   _|         | |      | | |       ry|__ \ y
| |__) |   _| |__  _   _ r | |  _ __  ___| |_ __ _| | | ___ _ __ry ) |y
|  _  / | | | '_ \| | | |r | | | '_ \/ __| __/ _` | | |/ _ \ '__ry/ / y
| | \ \ |_| | |_) | |_| |r_| |_| | | \__ \ || (_| | | |  __/ | ry/ /_ y
|_|  \_\__,_|_.__/ \__, r|_____|_| |_|___/\__\__,_|_|_|\___|_|ry|____|y
                    __/ |   c        _                              c
                   |___/    c      _|_ _  __   | | o __  _| _     _ c
                            c       | (_) |    |^| | | |(_|(_)\^/_> c
}

      def print_logo
        puts  LOGO.gsub(/r(.*?)r/){ magenta($1) }
                  .gsub(/y(.*?)y/){ cyan($1) }
                  .gsub(/c(.*?)c/){ yellow($1) }
      end

      MSYS2_VERSION = ENV['MSYS2_VERSION'] || "20161025"
      MSYS2_URI = "http://repo.msys2.org/distrib/<arch>/msys2-<arch>-#{MSYS2_VERSION}.exe"

      MSYS2_I686_SHA256 = "4951a47177777a54c7ad4ac99755ba4bbdf1a0cb23a174a72d91f71dc25bcb15"
      MSYS2_X86_64_SHA256 = "2c198787ea1c4be39ff80466c4d831f8c7f06bd56d6d190bf63ede35292e344c"

      def msys2_download_uri
        arch = RUBY_PLATFORM=~/x64/ ? "x86_64" : "i686"
        MSYS2_URI.gsub(/<arch>/, arch)
      end

      def msys2_download_hash
        case RUBY_PLATFORM
          when /x64/ then MSYS2_X86_64_SHA256
          else MSYS2_I686_SHA256
        end
      end

      def check_hash(path, hash)
        print "Verify integrity of #{File.basename(path)} ..."
        res = Digest::SHA256.file(path).hexdigest == hash.downcase
        puts(res ? " OK" : " Failed")
        res
      end

      def install(args)
        require "tempfile"
        require "open-uri"
        require "digest"

        print_logo
        puts

        uri = msys2_download_uri
        filename = File.basename(uri)
        temp_path = File.join(ENV["TMP"] || ENV["TEMP"] || ENV["USERPROFILE"] || "C:/", filename)

        until check_hash(temp_path, msys2_download_hash)
          File.open(temp_path, "wb") do |fd|
            progress = 0
            total = 0
            params = {
              "Accept-Encoding" => 'identity',
              :content_length_proc => lambda{|length| total = length },
              :progress_proc => lambda{|bytes|
                new_progress = (bytes * 100) / total
                print "\rDownloading %s (%3d%%) " % [filename, new_progress]
                progress = new_progress
              }
            }
            OpenURI.open_uri(uri, params) do |io|
              fd << io.read
            end
          end
        end

      end

      def msys_version_info(msys_path)
        require "rexml/document"
        doc = File.open( File.join(msys_path, "components.xml") ) do |fd|
          REXML::Document.new fd
        end
        {
          "title" => doc.elements.to_a("//Packages/Package/Title").first.text,
          "version" => doc.elements.to_a("//Packages/Package/Version").first.text,
        }
      end

      def ignore_err
        begin
          yield
        rescue
        end
      end

      def print_version
        require "yaml"
        require "rbconfig"

        h = {
          "ruby" => { "version" => RUBY_VERSION,
                      "platform" => RUBY_PLATFORM },
          "ruby_installer" => { "version" => RubyInstaller::VERSION,
                                "git_commit" => RubyInstaller::GIT_COMMIT },
        }

        ignore_err do
          msys = RubyInstaller.msys2_installation
          msys.enable_msys_apps(if_no_msys: :raise)

          msys_ver = ignore_err{ msys_version_info(msys.msys_path) }
          h["msys2"] = { "path" => msys.msys_path }.merge(msys_ver || {})
        end

        ignore_err do
          cc = RbConfig::CONFIG['CC']
          ver, _ = `#{cc} --version`.split("\n", 2)
          h["cc"] = ver
        end

        ignore_err do
          ver, _ = `sh --version`.split("\n", 2)
          h["sh"] = ver
        end

        puts h.to_yaml
      end

      def print_help
        $stdout.puts <<-EOT
Usage:
    #{$0} [option]

Option:
    install                   Install MSYS2 and MINGW dev tools
    exec <command>            Execute a command within MSYS2 context
    enable                    Set environment variables for MSYS2
    disable                   Unset environment variables for MSYS2
    version                   Print RubyInstaller and MSYS2 versions
    help | --help | -? | /?   Display this help and exit
EOT
      end
    end
  end
end
